#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright Â© 2020  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.

(use-modules (ice-9 getopt-long)
             (ice-9 threads)
             (logger)
             (ui extract-region)
             (ui verify-unmapped)
             (ui postprocess)
             (ui preprocess)
             (ui panel-file)
             (ui remove-donor)
             (pcawg config)
             (pcawg dcc-portal)
             (pcawg filesystem)
             (pcawg hartwig)
             (srfi srfi-1))

(define %program-options
  '((help                   (single-char #\h) (value #f))
    (version                (single-char #\v) (value #f))))

;; ---------------------------------------------------------------------------
;; COMMAND-LINE PARSING
;; ---------------------------------------------------------------------------
;;
;; The following section handles command-line arguments.
;
(define (show-help)
  (for-each (lambda (line) (display line) (newline))
   '("This is acontrol."
     "  Subcommands:"
     "    extract-region"
     "    preprocess"
     "    postprocess"
     "    verify-unmapped"
     "    panel-file"
     "    remove-donor"
     ""
     "  Options:"
     "    --help           -h  Show this message."
     "    --version        -v  Show versioning information."))
  (exit 0))

(define (show-version)
  (display "acontrol @VERSION@")
  (newline)
  (exit 0))

(define (process-regular-options options)
  (let ((config (getopt-long options %program-options)))
    (cond
     [(assoc-ref config 'version) (show-version)]
     [else                        (show-help)])))

(let ((options (command-line)))
  (if (> (length options) 1)
      (let ((subcommand (cadr options)))
        (cond
         [(string= subcommand "extract-region")  (do-extract-region (cdr options))]
         [(string= subcommand "postprocess")     (do-postprocess (cdr options))]
         [(string= subcommand "preprocess")      (do-preprocess (cdr options))]
         [(string= subcommand "panel-file")      (do-panel-file (cdr options))]
         [(string= subcommand "remove-donor")    (do-remove-donor (cdr options))]
         [(string= subcommand "verify-unmapped") (do-verify-unmapped (cdr options))]
         [else                                   (process-regular-options options)]))
      (process-regular-options options)))
